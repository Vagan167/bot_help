from cProfile import label
from token import AWAIT

import schedule
import time
import logging
import asyncio
from prettytable import PrettyTable

from aiogram.types import CallbackQuery, message, ParseMode
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import Location
import sqlite3 as sq
import os

from getpass import getpass

from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from pyexpat.errors import messages

import Markups_general.markups_general_ru_us as mk_gen_rs
import Markups_general.markups_ru as mk_ru
import Markups_general.markups_us as mk_us
import information.about_ru as ab_r
import information.about_us as ab_u
import information.staff_ru as s_r
import information.staff_us as s_u
import information.implementation_experience_ru as ie_r
import information.implementation_experience_us as ie_u

class ReviewsState(StatesGroup):
    write_reviews_state_ru = State()
    write_reviews_state_us = State()

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Äf
bot = Bot(token='7548377015:AAEDsUeTL6iTi8ox53ZP-FFpz57YcqyHKCM')
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    async with state.proxy() as data:
        data['user_id'] = user_id
    # –ö–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!–Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ Algoritm23.\nHello I'm the bot assistant Algoritm23", reply_markup=mk_gen_rs.btn_—Åhoice)

@dp.callback_query_handler(lambda c: c.data == 'ru')
async def ru(callback_query: types.CallbackQuery):
    user_ru = [
        callback_query.from_user.id,
        callback_query.from_user.last_name,
        callback_query.from_user.first_name,
        'ru'
    ]
    with sq.connect('sq_baze/users.db') as con:
        cur = con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS users(
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                first_name TEXT,
                last_name TEXT,
                language TEXT
            )""")
        cur.execute("""UPDATE users SET last_name = ?, first_name = ?, language = ? WHERE user_id = ?""",
                    (callback_query.from_user.last_name, callback_query.from_user.first_name, 'ru',
                     callback_query.from_user.id))

        # –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏, –∑–Ω–∞—á–∏—Ç, –µ—ë –Ω–µ—Ç, –∏ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é
        if cur.rowcount == 0:
            cur.execute("INSERT INTO users (user_id, last_name, first_name, language) VALUES (?, ?, ?, ?)", user_ru)
        await bot.answer_callback_query(callback_query.id, text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!')
        await bot.send_message(callback_query.from_user.id, text='–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫!', reply_markup=mk_ru.btn_general_menu_ru)

@dp.callback_query_handler(lambda c: c.data == 'us')
async def us(callback_query: types.CallbackQuery):
    user_us = [
        callback_query.from_user.id,
        callback_query.from_user.last_name,
        callback_query.from_user.first_name,
        'us'
    ]
    with sq.connect('sq_baze/users.db') as con:
        cur = con.cursor()
        cur.execute("""CREATE TABLE IF NOT EXISTS users(
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            language TEXT
        )""")
        # –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
        cur.execute("""UPDATE users SET last_name = ?, first_name = ?, language = ? WHERE user_id = ?""",
                    (callback_query.from_user.last_name, callback_query.from_user.first_name, 'us',
                     callback_query.from_user.id))

        # –ï—Å–ª–∏ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏, –∑–Ω–∞—á–∏—Ç, –µ—ë –Ω–µ—Ç, –∏ –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—É—é
        if cur.rowcount == 0:
            cur.execute("INSERT INTO users (user_id, last_name, first_name, language) VALUES (?, ?, ?, ?)", user_us)

        con.commit()
        await bot.answer_callback_query(callback_query.id, text='You have switched to English!')
        await bot.send_message(callback_query.from_user.id, text='You have switched to English!', reply_markup=mk_us.btn_general_menu_us)

@dp.message_handler(lambda message: message.text == 'üìñ–û –Ω–∞—Å')
async def about_ru(message: types.Message):
    await bot.send_message(message.chat.id, ab_r.about_ru)

@dp.message_handler(lambda message: message.text == 'üìñAbout')
async def about_us(message: types.Message):
    await bot.send_message(message.chat.id, ab_u.about_us)

@dp.message_handler(lambda message: message.text == 'üè¢–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏')
async def staff_ru(message: types.Message):
    staff_info = s_r.name_while_ru()
    await bot.send_message(message.chat.id, '–ù–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n\n' + staff_info)

@dp.message_handler(lambda message: message.text == 'üè¢Staff')
async def staff_us(message: types.Message):
    staff_info = s_u.name_while_us()
    await bot.send_message(message.chat.id, 'Our staff:\n\n' + staff_info)

@dp.message_handler(lambda message: message.text == '‚≠ê–û—Ç–∑—ã–≤—ã')
async def reviews_ru(message: types.Message):
    await bot.send_message(message.chat.id, '–û—Ç–∫—Ä—ã–≤–∞—é –æ—Ç–∑—ã–≤—ã', reply_markup=mk_ru.btn_reviews_menu_ru)

@dp.message_handler(lambda message: message.text == '‚≠êReviews')
async def reviews_us(message: types.Message):
    await bot.send_message(message.chat.id, 'Opening reviews', reply_markup=mk_us.btn_reviews_menu_ru)

@dp.message_handler(lambda message: message.text == 'üîç–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã')
async def reviews_ru(message: types.Message):
    with sq.connect('sq_baze/reviews.db') as con:
        cur = con.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""CREATE TABLE IF NOT EXISTS reviews(
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            reviews TEXT
        )""")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
        cur.execute("SELECT first_name, last_name, reviews FROM reviews")
        reviews = cur.fetchall()

        if not reviews:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø—É—Å—Ç
            await bot.send_message(message.chat.id, '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.')
        else:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç–∑—ã–≤–∞–º–∏
            reviews_text = '–û—Ç–∑—ã–≤—ã:\n\n'
            for first_name, last_name, review in reviews:
                reviews_text += f'–ò–º—è: {first_name}, \n–§–∞–º–∏–ª–∏—è: {last_name}\n–û—Ç–∑—ã–≤: {review}\n{"." * 40}\n'
            await bot.send_message(message.chat.id, reviews_text)

@dp.message_handler(lambda message: message.text == 'üîçView reviews')
async def reviews_us(message: types.Message):
    with sq.connect('sq_baze/reviews.db') as con:
        cur = con.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""CREATE TABLE IF NOT EXISTS reviews(
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            reviews TEXT
        )""")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤
        cur.execute("SELECT first_name, last_name, reviews FROM reviews")
        reviews = cur.fetchall()

        if not reviews:  # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø—É—Å—Ç
            await bot.send_message(message.chat.id, "There're no reviews.")
        else:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –æ—Ç–∑—ã–≤–∞–º–∏
            reviews_text = 'Reviews:\n\n'
            for first_name, last_name, review in reviews:
                reviews_text += f'Name: {first_name}, \nSurname: {last_name}\nReview: {review}\n{"." * 40}\n'
            await bot.send_message(message.chat.id, reviews_text)

@dp.message_handler(lambda message: message.text == '‚úçÔ∏è–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤')
async def write_reviews_ru(message: types.Message, state: FSMContext):
        await bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤')
        await ReviewsState.write_reviews_state_ru.set()

@dp.message_handler(state=ReviewsState.write_reviews_state_ru)
async def write_reviews_ru_state(message: types.Message, state: FSMContext):
    user_text = message.text
    user_id = (message.from_user.id, message.from_user.first_name, message.from_user.last_name, user_text)
    with sq.connect('sq_baze/reviews.db') as con:
        cur = con.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""CREATE TABLE IF NOT EXISTS reviews(
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            reviews TEXT
        )""")
        cur.execute("INSERT INTO reviews (user_id, first_name, last_name, reviews) VALUES (?, ?, ?, ?)", user_id)
        con.commit()
        await bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!')
        await state.finish()

@dp.message_handler(lambda message: message.text == '‚úçÔ∏èWrite a review')
async def write_reviews_us(message: types.Message, state: FSMContext):
        await bot.send_message(message.chat.id, 'Write your review')
        await ReviewsState.write_reviews_state_us.set()

@dp.message_handler(state=ReviewsState.write_reviews_state_us)
async def write_reviews_us_state(message: types.Message, state: FSMContext):
    user_text = message.text
    user_id = (message.from_user.id, message.from_user.first_name, message.from_user.last_name, user_text)
    with sq.connect('sq_baze/reviews.db') as con:
        cur = con.cursor()
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        cur.execute("""CREATE TABLE IF NOT EXISTS reviews(
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            first_name TEXT,
            last_name TEXT,
            reviews TEXT
        )""")
        cur.execute("INSERT INTO reviews (user_id, first_name, last_name, reviews) VALUES (?, ?, ?, ?)", user_id)
        con.commit()
        await bot.send_message(message.chat.id, 'Thanks for the feedback!')
        await state.finish()

@dp.message_handler(lambda message: message.text == 'üåê–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫')
async def help_ru(message: types.Message):
    user = ('us', message.from_user.id)
    with sq.connect('sq_baze/users.db') as con:
        cur = con.cursor()
        cur.execute("UPDATE users SET language = ? WHERE user_id = ?", user)
        con.commit()
        await bot.send_message(message.chat.id, "We've changed your language", reply_markup=mk_us.btn_settings_menu_us)

@dp.message_handler(lambda message: message.text == 'üåêChange the language')
async def help_ru(message: types.Message):
    user = ('ru', message.from_user.id)
    with sq.connect('sq_baze/users.db') as con:
        cur = con.cursor()
        cur.execute("UPDATE users SET language = ? WHERE user_id = ?", user)
        con.commit()
        await bot.send_message(message.chat.id, "–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤–∞—à —è–∑—ã–∫", reply_markup=mk_ru.btn_settings_menu_ru)

@dp.message_handler(lambda message: message.text == '‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings_ru(message: types.Message):
    await bot.send_message(message.chat.id, '–û—Ç–∫—Ä—ã–≤–∞—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=mk_ru.btn_settings_menu_ru)

@dp.message_handler(lambda message: message.text == '‚öôÔ∏èSettings')
async def settings_us(message: types.Message):
    await bot.send_message(message.chat.id, 'Opening the settings', reply_markup=mk_us.btn_settings_menu_us)

@dp.message_handler(lambda message: message.text == 'üîô–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def back_to_the_main_menu_ru(message: types.Message):
    await bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=mk_ru.btn_general_menu_ru)

@dp.message_handler(lambda message: message.text == 'üîôBack to the main menu')
async def back_to_the_main_menu_us(message: types.Message):
    await bot.send_message(message.chat.id, "I'm going back to the main menu", reply_markup=mk_us.btn_general_menu_us)

@dp.message_handler(lambda message: message.text == 'üîô–ù–∞–∑–∞–¥')
async def back_to_the_main_menu_ru(message: types.Message):
    await bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ø–∞–Ω–µ–ª—å-–ø–æ–º–æ—â–∏', reply_markup=mk_ru.btn_help_menu_ru)

@dp.message_handler(lambda message: message.text == 'üîôBack')
async def back_to_the_main_menu_us(message: types.Message):
    await bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –ø–∞–Ω–µ–ª—å-–ø–æ–º–æ—â–∏', reply_markup=mk_us.btn_help_menu_us)

@dp.message_handler(lambda message: message.text == 'üíº–û–ø—ã—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è')
async def implementation_experience_ru(message: types.Message):
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    experience_text = '\n'.join(ie_r.implementation_experience_ru)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    formatted_text = '–û–ø—ã—Ç –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–º–ø–∞–Ω–∏–∏:\n\n' + experience_text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(message.chat.id, formatted_text, parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == 'üíºImplementation experience')
async def implementation_experience_us(message: types.Message):
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
    experience_text = '\n'.join(ie_u.implementation_experience_us)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    formatted_text = 'Project implementation experience by the founder of the company:\n\n' + experience_text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(message.chat.id, formatted_text, parse_mode='Markdown')

@dp.message_handler(lambda message: message.text == '‚ùì–ü–æ–º–æ—â—å')
async def help_ru(message: types.Message):
    await bot.send_message(message.chat.id, '–û—Ç–∫—Ä—ã–≤–∞—é –ø–∞–Ω–µ–ª—å –ø–æ–º–æ—â–∏', reply_markup=mk_ru.btn_help_menu_ru)

@dp.message_handler(lambda message: message.text == '‚ùìHelp')
async def help_us(message: types.Message):
    await bot.send_message(message.chat.id, 'Opening the help panel', reply_markup=mk_us.btn_help_menu_us)

@dp.message_handler(lambda message: message.text == 'üìû–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å IT —Å–æ—Ç—Ä—É–Ω–∏–∫–æ–º')
async def feedback_from_the_IT_partner_ru(message: types.Message):
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = -1002166563393
    thread_id = 10

    if username:
        result_message = (
            '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!\n'
            f"–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–ª–∏–µ–Ω—Ç–∞: <a href='https://t.me/{username}'>@{username}</a>\n"
        )
    else:
        result_message = '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º! –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç
    await bot.send_message(chat_id, result_message, parse_mode=ParseMode.HTML, message_thread_id=thread_id)
    await message.reply('–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –≤–∞–º —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç!')

@dp.message_handler(lambda message: message.text == 'üìûFeedback from the IT partner')
async def feedback_from_the_IT_partner_us(message: types.Message):
    username = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = -1002166563393
    thread_id = 10

    if username:
        result_message = (
            '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º!\n'
            f"–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–ª–∏–µ–Ω—Ç–∞: <a href='https://t.me/{username}'>@{username}</a>\n"
        )
    else:
        result_message = "–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å IT —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º! –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç
    await bot.send_message(chat_id, result_message, parse_mode=ParseMode.HTML, message_thread_id=thread_id)
    await message.reply('The employee will answer you soon!')

@dp.message_handler(lambda message: message.text == 'ü§ù–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–º –î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º')
async def feedback_from_the_general_director_ru(message: types.Message):
    gen_chat_id = '193458128'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –î–∏—Ä–µ–∫—Ç–æ—Ä–∞
    username = message.from_user.username

    if username:
        result_message = (
            '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–º –î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º!\n'
            f"–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–ª–∏–µ–Ω—Ç–∞: <a href='https://t.me/{username}'>@{username}</a>\n"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –î–∏—Ä–µ–∫—Ç–æ—Ä—É
        await bot.send_message(gen_chat_id, result_message, parse_mode=ParseMode.HTML)
        await message.reply('–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç!')
    else:
        await message.reply('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –î–∏—Ä–µ–∫—Ç–æ—Ä—É.')

@dp.message_handler(lambda message: message.text == 'ü§ùFeedback from the General Director')
async def feedback_from_the_general_director_us(message: types.Message):
    gen_chat_id = '193458128'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π chat_id –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –î–∏—Ä–µ–∫—Ç–æ—Ä–∞
    username = message.from_user.username

    if username:
        result_message = (
            '–ö–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–º –î–∏—Ä–µ–∫—Ç–æ—Ä–æ–º!\n'
            f"–¢–µ–ª–µ–≥—Ä–∞–º–º –∫–ª–∏–µ–Ω—Ç–∞: <a href='https://t.me/{username}'>@{username}</a>\n"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–º—É –î–∏—Ä–µ–∫—Ç–æ—Ä—É
        await bot.send_message(gen_chat_id, result_message, parse_mode=ParseMode.HTML)
        await message.reply('The General Director will reply to you soon!')
    else:
        await message.reply("The user's name is not available. The message could not be sent to the General Director.")

@dp.message_handler(lambda message: message.text == 'üìö–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
async def instruciton_ru(message: types.Message):
    await bot.send_message(message.chat.id, '–û—Ç–∫—Ä—ã–≤–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', reply_markup=mk_ru.btn_help_instructions_menu_ru)

@dp.message_handler(lambda message: message.text == 'üìöInstructions')
async def instruciton_us(message: types.Message):
    await bot.send_message(message.chat.id, '–û—Ç–∫—Ä—ã–≤–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', reply_markup=mk_us.btn_help_instructions_menu_us)

@dp.message_handler(lambda message: message.text == 'üìñ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –£—á–µ—Ç—É —Ç–µ—Ö–Ω–∏–∫–∏')
async def instruction_one_ru(message: types.Message):
    with open("instructions/–†–ï–ö_–£—á–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∏.docx", "rb") as docx_file:
        await bot.send_document(message.chat.id, docx_file)

@dp.message_handler(lambda message: message.text == 'üìù–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ó–∞—è–≤–∫–∏ –Ω–∞ –ú–ü–ó')
async def instruction_two_ru(message: types.Message):
    with open("instructions/–†–ï–ö_1_–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_–ø–æ_—Å–æ–∑–¥–∞–Ω–∏—é_–∑–∞—è–≤–∫–∏_–Ω–∞_–ú–ü–ó_4.docx", "rb") as docx_file:
        await bot.send_document(message.chat.id, docx_file)

@dp.message_handler(lambda message: message.text == 'üìÑ–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ü—Ä–∏—Ö–æ–¥–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞, –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –¥–æ–ø.\n–†–∞—Å—Ö–æ–¥–æ–≤, –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
async def instruction_three_ru(message: types.Message):
    with open("instructions/3_3_–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_–ø–æ_—Å–æ–∑–¥–∞–Ω–∏—é_–ü—Ä–∏—Ö–æ–¥–Ω–æ–≥–æ_–æ—Ä–¥–µ—Ä–∞,_–ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ_–¥–æ–ø_—Ä–∞—Å—Ö–æ–¥–æ–≤.docx", "rb") as docx_file:
        await bot.send_document(message.chat.id, docx_file)

@dp.message_handler(lambda message: message.text == 'üìë–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ó–∞–∫–∞–∑–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É')
async def instruction_four_ru(message: types.Message):
    with open("instructions/–†–ï–ö_–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_–ø–æ_—Å–æ–∑–¥–∞–Ω–∏—é_–ó–∞–∫–∞–∑–∞_–ø–æ—Å—Ç–∞–≤—â–∏–∫—É.docx", "rb") as docx_file:
        await bot.send_document(message.chat.id, docx_file)

@dp.message_handler(lambda message: message.text == 'üåê–ù–∞—à —Å–∞–π—Ç')
async def our_website_ru(message: types.Message):
    await bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç', reply_markup=mk_ru.website_menu_ru)

@dp.message_handler(lambda message: message.text == 'üåêOur website')
async def our_website_us(message: types.Message):
    await bot.send_message(message.chat.id, 'Click on the button to go to the website', reply_markup=mk_us.website_menu_us)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    executor.start_polling(dp, loop=loop, skip_updates=True)